Day 2 notes

http://konf.me/pdp

ildasm.exe 

code smells
	primitive obsession 
		-> when we use a primitive type (e.g., integer) instead of a 
		-> refactoring is to introduce proper abstractions 
 
	complex method 
		-> moment it crosses certain cyclomatic complexity limit 
	
design smell 
	needless null check!!  
		-> Missing abstraction 
		-> Constant object, that is not needed anymore 

	switch based on type 
		-> "Missing hierarchy"
		-> replaced with runtime polymorphism 
 
	complex object creation smell 
		-> somewhat simplified because of domain abstractions
 		
Arch smell 
	procedural design -> can I mechanically translate this into C code -> answer is Yes 

Original Expression: 

	// ((10 * 20) + 30) 
	var expr = new Expr(
                new Expr(
                    new Expr(null, "10", null), "*", new Expr(null, "20", null)),
                "+",
                new Expr(null, "30", null));


	var exprTree = ten.MultipledBy(20).Plus(30);  


Step 1 (somewhat better): 

	var exprNode = new Plus(
                new Multiply(
                    new Constant(10),
                    new Constant(10)),
                new Constant(10));

Step 2: 

var exprNode = Plus.Make(
                Multiply.Make(
                    Constant.Make(10),
                    Constant.Make(10)),
                Constant.Make(10));

Step 3: 

((10 * 20) + 30) 

var exprNode = new ExprBuilder().Const(10).MultipliedBy(20).Plus(10).Build();


Final step: 

((10 * 20) + 30)
var ten = Constant.Make(10); 

var exprTree = ten.MultipledBy(20).Plus(30);  

	
// fluent interfaces
// we are dealing with domain language 
// for endusers- programmers  

An expression tree consists of expression nodes. The nodes can be operators or constants. 


enum FileElementType {
	Folder, File, Shortcut 
	} 

class BinaryExprNode : ExprNode
    {
        private readonly IList<ExprNode> elements;


Composite pattern 

Signature 
	Class that is dervied from its base type and has objects of its base type

// factory methods 
// controlling or limiting object creation 
// provides basis for further design improvements and simplifications, 
// including builder, flyweight, fluent interfaces, etc 

Example of controlling object creation - REUSE objects 

Flyweight 

lightweight objects 
commonly created ones 
data structure and check for existing objects instead of creating new ones 

Pool in Flyweight	Cache 

Lightweight 		Light or heavy 
Immutable 		Can be mutable 
Only if reuse widely	For performance improvement 
(space constraints) 

Builder

*Any* Complex object 
	-> hierarchical structure 
	-> lots of fields 

Symptoms/Scenarios: 
	Long constructor parameter lists 
	Long constructor body 
	Lots of overloaded constructors 
	Many fields ( >6 )
	... 


enum ByteCodes {
	LDCI4S = 0x1F, 
	

class Interpreter {
	private Stack<int> execStack  = ... 
	public int Interpret(byte [] bytecodes) {
		int pc = 0;
		while(pc < bytecodes.length) {
		switch(bytecodes[pc++]) {
		case LDCI4S: 
			execStack.Push(bytecodes[pc++]);
			break; 
		case ADD: 
			execStack.Push(execStack.Pop() + execStack.Pop());
			break;
		case MUL: 
			execStack.Push(execStack.Pop() * execStack.Pop());
			break;
		... 
							
	} 
}



// (10 * 20) + 30 
byte[] bytecodes = { 0x1F, 0x0A, 0x1F, 0x14, 0x5A, 0x1F, 0x1E, 
0x58 };

int result = new Interpreter().Interpret(bytecodes); 

// 60 
Console.WriteLine(result) 

Design smells 

Switch based on types
External iteration 
Insufficient Encapsulation

Architecture smell 

Procedural style 

ByteCode provider class -- 

ByteCode 
AddByteCode 
MultiplyByteCode 
















